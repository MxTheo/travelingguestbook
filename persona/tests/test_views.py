from django.urls import reverse
from travelingguestbook.factories import PersonaFactory, ProblemFactory, ReactionFactory
from persona.models import Persona

class TestPersonaViews:
    """Tests for persona views using factories."""
    def test_persona_list_view(self, client):
        """Test the persona list view."""
        persona1 = PersonaFactory()
        persona2 = PersonaFactory()

        response = client.get(reverse('persona-list'))
        assert response.status_code == 200
        assert 'personas' in response.context
        personas = list(response.context['personas'])
        assert persona1 in personas
        assert persona2 in personas

    def test_persona_create_view(self, client):
        """Test the persona create view"""

        response = client.get(reverse('create-persona'))
        assert response.status_code == 200

        data = {
            'title': 'New Persona from Factory',
            'core_question': 'New factory question?',
            'description': 'New description from factory',
        }

        response = client.post(reverse('create-persona'), data)
        assert response.status_code == 302
        assert Persona.objects.count() == 1

    def test_persona_create_view_with_factory_data(self, client):
        """Test persona creation using factory-generated data."""
        data = {
            'title': 'Factory Generated Persona',
            'core_question': 'How does this work?',
            'description': 'This is a test description generated by factory.',
        }

        response = client.post(reverse('create-persona'), data)
        assert response.status_code == 302

        persona = Persona.objects.get(title='Factory Generated Persona')
        assert persona.core_question == 'How does this work?'

    def test_persona_update_view(self, client):
        """Test the persona update view"""
        persona = PersonaFactory()

        response = client.get(reverse('update-persona', args=[persona.pk]))
        assert response.status_code == 200

        data = {
            'title': 'Updated Factory Persona',
            'core_question': 'Updated question?',
            'description': 'Updated description',
        }

        response = client.post(reverse('update-persona', args=[persona.pk]), data)
        assert response.status_code == 302
        persona.refresh_from_db()
        assert persona.title == 'Updated Factory Persona'

    def test_persona_detail_view(self, client):
        """Test the persona detail view"""
        persona = PersonaFactory()
        ProblemFactory.create_batch(3, persona=persona)
        ReactionFactory.create_batch(3, persona=persona)

        response = client.get(reverse('persona-detail', args=[persona.pk]))
        assert response.status_code == 200
        assert response.context['persona'] == persona
        assert response.context['persona'].problems.count() == 3
        assert response.context['persona'].reactions.count() == 3

class TestProblemCreateView:
    """Tests for the ProblemCreateView."""
    def test_problem_create_view_get(self, client):
        """Test getting the problem create view."""
        persona = PersonaFactory()
        url = reverse('create-problem', kwargs={'persona_pk': persona.pk})
        response = client.get(url)

        assert response.status_code == 200
        assert 'form' in response.context
        assert response.context['persona'] == persona
        assert 'Probleem toevoegen' in response.content.decode()

    def test_problem_create_view_post_valid(self, client):
        """Test posting valid data to problem create view."""
        persona = PersonaFactory()
        url = reverse('create-problem', kwargs={'persona_pk': persona.pk})

        data = {
            'description': 'Test problem description',
        }

        response = client.post(url, data)

        assert response.status_code == 302
        assert response.url == reverse('persona-detail', kwargs={'pk': persona.pk})

        # Check if problem was created
        assert persona.problems.count() == 1
        problem = persona.problems.first()
        assert problem.description == 'Test problem description'

    def test_problem_create_view_post_invalid(self, client):
        """Test posting invalid data to problem create view."""
        persona = PersonaFactory()
        url = reverse('create-problem', kwargs={'persona_pk': persona.pk})

        # Empty text should be invalid
        data = {
            'description': '',  # Required field
        }

        response = client.post(url, data)

        assert response.status_code == 200
        assert 'form' in response.context
        assert response.context['form'].errors
        assert persona.problems.count() == 0

    def test_problem_create_view_add_another(self, client):
        """Test posting data with 'add_another' to problem create view."""
        persona = PersonaFactory()
        url = reverse('create-problem', kwargs={'persona_pk': persona.pk})

        data = {
            'description': 'First problem description',
            'add_another': 'True',  # Simulate the add another button
        }

        response = client.post(url, data, follow=True)

        assert response.status_code == 200  # Should render the form again
        assert 'form' in response.context
        assert response.context['persona'] == persona

        # Check if problem was created
        assert persona.problems.count() == 1
        problem = persona.problems.first()
        assert problem.description == 'First problem description'

class TestReactionCreateView:
    """Tests for the ReactionCreateView."""
    def test_reaction_create_view_get(self, client):
        """Test getting the reaction create view."""
        persona = PersonaFactory()
        url = reverse('create-reaction', kwargs={'persona_pk': persona.pk})
        response = client.get(url)

        assert response.status_code == 200
        assert 'form' in response.context
        assert response.context['persona'] == persona
        assert 'Reactie toevoegen' in response.content.decode()

    def test_reaction_create_view_post_valid(self, client):
        """Test posting valid data to reaction create view."""
        persona = PersonaFactory()
        url = reverse('create-reaction', kwargs={'persona_pk': persona.pk})

        data = {
            'description': 'Test reaction text',
        }

        response = client.post(url, data)

        assert response.status_code == 302
        assert response.url == reverse('persona-detail', kwargs={'pk': persona.pk})

        # Check if reaction was created
        assert persona.reactions.count() == 1
        reaction = persona.reactions.first()
        assert reaction.description == 'Test reaction text'

    def test_reaction_create_view_post_invalid(self, client):
        """Test posting invalid data to reaction create view."""
        persona = PersonaFactory()
        url = reverse('create-reaction', kwargs={'persona_pk': persona.pk})

        # Empty text should be invalid
        data = {
            'description': '',  # Required field
        }

        response = client.post(url, data)

        assert response.status_code == 200
        assert 'form' in response.context
        assert response.context['form'].errors
        assert persona.reactions.count() == 0

    def test_reaction_create_view_add_another(self, client):
        """Test posting data with 'add_another' to reaction create view."""
        persona = PersonaFactory()
        url = reverse('create-reaction', kwargs={'persona_pk': persona.pk})

        data = {
            'description': 'First reaction text',
            'add_another': 'True',  # Simulate the add another button
        }

        response = client.post(url, data, follow=True)

        assert response.status_code == 200  # Should render the form again
        assert 'form' in response.context
        assert response.context['persona'] == persona

        # Check if reaction was created
        assert persona.reactions.count() == 1
        reaction = persona.reactions.first()
        assert reaction.description == 'First reaction text'

class TestReactionDeleteView:
    """Tests for the ReactionDeleteView."""
    def test_reaction_delete_view_get(self, client):
        """Test getting the reaction delete view."""
        persona = PersonaFactory()
        reaction = ReactionFactory(persona=persona)
        url = reverse('delete-reaction', kwargs={'pk': reaction.pk})
        response = client.get(url)

        assert response.status_code == 200
        assert 'Weet je zeker dat je' in response.content.decode()

    def test_reaction_delete_view_post(self, client):
        """Test posting to the reaction delete view."""
        persona = PersonaFactory()
        reaction = ReactionFactory(persona=persona)
        url = reverse('delete-reaction', kwargs={'pk': reaction.pk})

        response = client.post(url)

        assert response.status_code == 302
        assert response.url == reverse('persona-detail', kwargs={'pk': persona.pk})

        # Check if reaction was deleted
        assert persona.reactions.count() == 0

class TestProblemDeleteView:
    """Tests for the ProblemDeleteView."""
    def test_problem_delete_view_get(self, client):
        """Test getting the problem delete view."""
        persona = PersonaFactory()
        problem = ProblemFactory(persona=persona)
        url = reverse('delete-problem', kwargs={'pk': problem.pk})
        response = client.get(url)

        assert response.status_code == 200
        assert 'Weet je zeker dat je' in response.content.decode()

    def test_problem_delete_view_post(self, client):
        """Test posting to the problem delete view."""
        persona = PersonaFactory()
        problem = ProblemFactory(persona=persona)
        url = reverse('delete-problem', kwargs={'pk': problem.pk})

        response = client.post(url)

        assert response.status_code == 302
        assert response.url == reverse('persona-detail', kwargs={'pk': persona.pk})

        # Check if problem was deleted
        assert persona.problems.count() == 0
